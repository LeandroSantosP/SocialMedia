generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  bio        String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  password   String
  IsAdmin    Boolean   @default(false)
  avatar_url String?
  Comments   Comment[]
  posts      Post[]
  review     Review[]

  @@map("clients")
}

model Post {
  id                String              @id @default(uuid())
  title             String              @unique
  visible           Boolean
  created_at        DateTime            @default(now())
  updated_At        DateTime            @updatedAt
  content           String?
  IsActive          Boolean             @default(true)
  IsPublished       Boolean             @default(false)
  CategoriesOnPosts CategoriesOnPosts[]
  comments          Comment[]
  review            Review[]

  author   Client @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int    @default(autoincrement())

  @@map("posts")
}

model Review {
  id     String   @id @default(uuid())
  iliked Boolean? @default(false)

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  author   Client @relation(fields: [clientId], references: [id])
  clientId Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("reviews")
}

model Comment {
  id         String   @id @default(uuid())
  authorName String
  comment    String
  created_at DateTime @default(now())
  updated_At DateTime @updatedAt
  postId     String
  authorId   Int
  author     Client   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Category {
  id                String              @id @default(uuid())
  name              String              @unique
  created_at        DateTime            @default(now())
  updated_At        DateTime            @updatedAt
  description       String?
  slug              String              @unique
  CategoriesOnPosts CategoriesOnPosts[]

  @@map("categories")
}

model CategoriesOnPosts {
  postId     String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
}
